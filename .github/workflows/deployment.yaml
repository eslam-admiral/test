on:
  push:
    branches:
      - staging
      - development
    tags:
        - 'v*'    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:       
    - name: Checkout master
      uses: actions/checkout@v2

    - id: file_changes
      name: File Changes
      uses: trilom/file-changes-action@v1.2.3
      with:
        prNumber: $
        pushBefore: ''
        pushAfter: ''

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Log in to DigitalOcean Container Registry with short-lived credentials
      run: doctl registry login --expiry-seconds 1200
      
    - name: Extract branch name
      shell: bash
      run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
      id: extract_branch

    - name: taging
      id: gen_tags
      run: |
        if [[ ${{  steps.extract_branch.outputs.branch  }} == staging ]]; then
          export TAGS='[${{github.run_number}}]'
        else
          export TAGS='[latest]'
        fi
        echo '::set-output name=tags::'$TAGS             

    - name: Docker meta for python
      id: meta1
      uses: docker/metadata-action@v3
      with:
        images: registry.digitalocean.com/${{ secrets.registry }}/python
        tags: |
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{version}},value=${{fromJson(steps.gen_tags.outputs.tags)}}
      #if: contains(steps.file_changes.outputs.files , '"projects/python')     

    - name: Docker meta for helloworld
      id: meta2
      uses: docker/metadata-action@v3
      with:
        images: registry.digitalocean.com/${{ secrets.registry }}/helloworld
        tags: |
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{version}},value=${{fromJson(steps.gen_tags.outputs.tags)}}
      #if: contains(steps.file_changes.outputs.files , '"projects/helloworld') 

    - name: Build python and push
      uses: docker/build-push-action@v2
      with:
        context: ./projects/python
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta1.outputs.tags }}
        labels: ${{ steps.meta1.outputs.labels }}
      #if: contains(steps.file_changes.outputs.files , '"projects/python')      
    
    - name: Build helloworld and push
      uses: docker/build-push-action@v2
      with:
        context: ./projects/helloworld
        push: ${{ github.event_name != 'pull_request' }}
        tags: ${{ steps.meta2.outputs.tags }}
        labels: ${{ steps.meta2.outputs.labels }}
      #if: contains(steps.file_changes.outputs.files , '"projects/helloworld')  
    # - name: Build python
    #   uses: flownative/action-docker-build@master
    #   with:
    #       context: ./projects/python
    #       tag_ref: ${{  steps.extract_branch.outputs.branch  }}
    #       image_name: registry.digitalocean.com/${{ secrets.registry }}/python:${{  steps.extract_branch.outputs.branch  }}-${{ github.run_number }}
    #       registry_password: 68a12a9d6b189a17ebd40cdc38a31e20edf148e0a939149ec1cc19ecfa7d4b93:68a12a9d6b189a17ebd40cdc38a31e20edf148e0a939149ec1cc19ecfa7d4b93
    #   #if: contains(steps.file_changes.outputs.files , '"projects/python')    

    # - name: Build helloworld
    #   uses: flownative/action-docker-build@master
    #   with:
    #       tag_ref: ${{  steps.extract_branch.outputs.branch  }}
    #       image_name: registry.digitalocean.com/${{ secrets.registry }}/helloworld:${{  steps.extract_branch.outputs.branch  }}-${{github.run_number}}
    #   #if: contains(steps.file_changes.outputs.files , '"projects/helloworld')    
          # registry_password: ${{ secrets.GITHUB_TOKEN }}
      # run: docker build -t registry.digitalocean.com/${{ secrets.registry }}/llsgscv-dev/helloworld:latest .  

    # - name: Log in to DigitalOcean Container Registry with short-lived credentials
    #   run: doctl registry login --expiry-seconds 1200    

    # - name: Push image to DigitalOcean Container Registry
    #   uses: flownative/action-docker-publish-semver@master
    #   with:
    #     tag_ref: ${{  steps.extract_branch.outputs.branch  }}
    #     tag_latest: 'yes'
    #     tag_custom: 'some-custom-tag'      
      # run: docker push registry.digitalocean.com/${{ secrets.registry }}/llsgscv-dev/helloworld:latest  

    # - name: Update deployment file
    #   run: TAG=latest && sed -i 's|<IMAGE>|registry.digitalocean.com/${{ secrets.registry }}/llsgscv-dev/helloworld:'${TAG}'|' $GITHUB_WORKSPACE/config/deployment.yml
    # - name: Extract branch name
    #   shell: bash
    #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
    #   id: extract_branch

    # - name: Save DigitalOcean kubeconfig with short-lived credentials
    #   run: doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ secrets.cluster_name }}

    # - name: Deploy python to DigitalOcean Kubernetes
    #   run: kubectl -n ${{ steps.extract_branch.outputs.branch }} --record deployment.apps/python set image deployment.v1.apps/python python=registry.digitalocean.com/${{ secrets.registry }}/python:1.0.0-${{github.run_number}}
    #   #if: contains(steps.file_changes.outputs.files , '"projects/python') 

    # - name: Deploy helloworld to DigitalOcean Kubernetes
    #   run: kubectl -n ${{ steps.extract_branch.outputs.branch }} --record deployment.apps/helloworld set image deployment.v1.apps/helloworld helloworld=registry.digitalocean.com/${{ secrets.registry }}/helloworld:1.0.0-${{github.run_number}}
    #   #if: contains(steps.file_changes.outputs.files , '"projects/helloworld') 

    # #   # run: kubectl apply -f $GITHUB_WORKSPACE/config/deployment.yml

    # - name: Verify python deployment
    #   run: kubectl -n ${{ steps.extract_branch.outputs.branch }} rollout status deployment/python
    #   #if: contains(steps.file_changes.outputs.files , '"projects/python') 

    # - name: Verify helloworld deployment
    #   run: kubectl -n ${{ steps.extract_branch.outputs.branch }} rollout status deployment/helloworld 
      #if: contains(steps.file_changes.outputs.files , '"projects/helloworld') 